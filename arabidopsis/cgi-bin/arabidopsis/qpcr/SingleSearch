#!/usr/local/bin/perl -w

#Version 1.3 Jun Zhuang,  
#Note:
# Aug 16, 2007, small bug: add  $gene_group=~s/^\s+//g;
# Apr 12,13,2007 extra column for stddev, remove begining content, results only
#Version 1.2 Hui Quan Jan 17,2007

use CGI qw(:standard);
use CGI::Carp qw( fatalsToBrowser );
use DBI;
use HTML::Template;


my $underscore_plus=241;

###### Connect to database 

my $server_name = $ENV{"SERVER_NAME"};
my $dbh;

#my $INTERNAL_SERVER = ($server_name eq "www-devel.tigr.org") ? 1 : 0;
my $INTERNAL_SERVER = ($server_name eq "localhost") ? 1 : 0;

# inside
if ($INTERNAL_SERVER) {

    $dbh = DBI->connect("dbi:mysql:town_at_qpcr:mysql","access","access") or die "Cannot connect to database";
}

else {

    $dbh = DBI->connect("dbi:mysql:town_at_qpcr:mysql51-dmz-pro","access","access") or die "Cannot connect to database";
}


my $gene_group = uc param("gene");

my $format=param("format");

$gene_group=~s/[,;]/\t/g;
$gene_group=~s/\s\s*/\t/g;
$gene_group=~s/\n\s+/\n/g;
$gene_group=~s/^\s+//g;
@gene_names=split(/\s+/,$gene_group);


my @tissue_name = param("tissuesearch");
foreach my $tissue(@tissue_name)
{
   $tissue=uc $tissue;
}
my $tissue_group="(\"".join("\", \"",@tissue_name)."\")";


$list_query = qq{select distinct (treatment_name)from treatment;};
my $sth1=$dbh->prepare($list_query);

$sth1->execute();
while(my @list_result=$sth1->fetchrow_array()){
	push (@drop_list, @list_result);
}
foreach my $listitem(@drop_list){
	my $show_value;
	if(length($listitem)>2){
	;#JZ21	$show_value=substr($listitem,0,3);
		$show_value=$listitem;

        }
	else{ $show_value=$listitem;}
    my %list_hash = (
	elem_optionid => $show_value, 
	elem_listname => $listitem, 


    );
    push(@list_presentation, \%list_hash);
}



my $query;
my @search_results;

foreach $gene_name(@gene_names)
{
   if(($#tissue_name)<0)
   {
      $query=qq{SELECT * FROM results WHERE target_id LIKE '$gene_name%' };
#			print "query is $query\n";		
   }
   else{
      $query=qq{SELECT * FROM results WHERE target_id LIKE '$gene_name%' 
			AND tissue_treatment_group_id IN $tissue_group};

   }

   my $sth=$dbh->prepare($query);

   $sth->execute();


   while (my @result = $sth->fetchrow_array()){

      push(@search_results,join("\t",@result));
    
   }

}


# render sorted taxon stats table into format for template

foreach $row(@search_results)
{
   my @field=split(/\s/,$row);
   for(my $i=2;$i<8;$i+=2){
      if(!defined($field[$i])){
 	 $field[$i]="NA";$field[$i+1]="";}
      else
      {
  	 if($field[$i]=~m#0\.0*\d\d\d*# )
	 {
		$field[$i]=~s/(0\.0*\d\d)\d*/$1/;}
	 else
	 {
  		$field[$i]=~s/([1-9]+\.\d\d)\d*/$1/;}
	 if($field[$i+1]=~m#0\.0*\d\d\d*# )
	 {
		$field[$i+1]=~s/(0\.0*\d\d)\d*/$1/;}
	 else
	 {
  		$field[$i+1]=~s/([1-9]+\.\d\d)\d*/$1/;}
		
         $field[$i+1]=$field[$i+1];
      }

      if(($field[2] == 45) || ($field[2] == 0) )
      {
	$field[$i]="Undetectable"; $field[$i+1]="";
      }
   }

   my %row_hash = (
#	elem_error=>$query,
	elem_target_id => $field[0], 
	elem_tissue => $field[1], 
	#JZ2 elem_cycle_time => $field[2].$field[3],
	elem_cycle_time => $field[2],
	elem_cycle_time2 => $field[3],
	#JZ2 elem_ratio => $field[4].$field[5], 
	elem_ratio => $field[4], 
	elem_ratio2 => $field[5], 
	#JZ2 elem_conc => $field[6].$field[7]
	elem_conc => $field[6],
	elem_conc2 => $field[7]

   );

   push(@result_presentation, \%row_hash);
   push(@result_presentation2, \%row_hash);
}



    if ($format eq "text") {

        print header;

        if (scalar(@result_presentation) == 0) {

           $tmpl =HTML::Template->new(filename => "search_error.tmpl");
        }

        else {

		$tmpl = HTML::Template->new(filename => "search_returntext.tmpl");
		$tmpl->param(singlesearch_table=>\@result_presentation);}
        print $tmpl->output;
    }

   else{
	if($#result_presentation >=0){
		$tmpl = HTML::Template->new(filename => "search_return1.tmpl");
		$tmpl->param(singlesearch_table=>\@result_presentation);
		#JZ2	$tmpl->param(list1=>\@list_presentation);
		#$tmpl->param(list2=>\@list_presentation);
		#$tmpl->param(list3=>\@list_presentation);
	}
	else
	{
	  # $tmpl =HTML::Template->new(filename => "search_error.tmpl");
		$tmpl = HTML::Template->new(filename => "search_return1.tmpl");
	#	$tmpl->param(list2=>\@list_presentation);
	#	$tmpl->param(list3=>\@list_presentation);
	}
	print header;
        #print "gene name: $gene_name\n  tissue_group input are :$tissue_group\n";
	print $tmpl->output;

   }

